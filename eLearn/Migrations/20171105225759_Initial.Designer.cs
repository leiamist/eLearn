// <auto-generated />
using eLearn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace eLearn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171105225759_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eLearn.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorrectAnswer");

                    b.Property<Guid>("EvaluationID");

                    b.Property<string>("ImageCorrect");

                    b.Property<string>("ImageMyAnswer");

                    b.Property<string>("MyAnswer");

                    b.Property<string>("Question");

                    b.HasKey("AnswerID");

                    b.HasIndex("EvaluationID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("eLearn.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MaternalSurname");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PaternalSurname");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("eLearn.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Summary");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("eLearn.Models.Content", b =>
                {
                    b.Property<Guid>("ContentID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FormatID");

                    b.Property<Guid>("LessonID");

                    b.Property<string>("URL");

                    b.HasKey("ContentID");

                    b.HasIndex("FormatID");

                    b.HasIndex("LessonID")
                        .IsUnique();

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("eLearn.Models.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("ProfessorID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Summary");

                    b.HasKey("CourseID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("eLearn.Models.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseID");

                    b.Property<double>("Progress");

                    b.Property<string>("StudentID");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("eLearn.Models.Evaluation", b =>
                {
                    b.Property<Guid>("EvaluationID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndingDate");

                    b.Property<Guid>("ExamID");

                    b.Property<double>("Score");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StudentID");

                    b.HasKey("EvaluationID");

                    b.HasIndex("ExamID");

                    b.HasIndex("StudentID");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("eLearn.Models.Exam", b =>
                {
                    b.Property<Guid>("ExamID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("EndingDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Summary");

                    b.HasKey("ExamID");

                    b.HasIndex("CourseID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("eLearn.Models.Format", b =>
                {
                    b.Property<Guid>("FormatID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("FormatID");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("eLearn.Models.Lesson", b =>
                {
                    b.Property<Guid>("LessonID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ModuleID");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<string>("Summary");

                    b.HasKey("LessonID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("eLearn.Models.LessonProgress", b =>
                {
                    b.Property<Guid>("LessonProgressID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LessonID");

                    b.Property<double>("Progress");

                    b.Property<string>("StudentID");

                    b.HasKey("LessonProgressID");

                    b.HasIndex("LessonID");

                    b.HasIndex("StudentID");

                    b.ToTable("LessonProgress");
                });

            modelBuilder.Entity("eLearn.Models.Module", b =>
                {
                    b.Property<Guid>("ModuleID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseID");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<string>("Summary");

                    b.HasKey("ModuleID");

                    b.HasIndex("CourseID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("eLearn.Models.ModuleProgress", b =>
                {
                    b.Property<Guid>("ModuleProgressID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ModuleID");

                    b.Property<double>("Progress");

                    b.Property<string>("StudentID");

                    b.HasKey("ModuleProgressID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("StudentID");

                    b.ToTable("ModuleProgress");
                });

            modelBuilder.Entity("eLearn.Models.Option", b =>
                {
                    b.Property<Guid>("OptionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Imagen");

                    b.Property<int>("Number");

                    b.Property<Guid>("QuestionID");

                    b.Property<string>("Summary");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("eLearn.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorrectAnswer");

                    b.Property<string>("Description");

                    b.Property<Guid>("ExamID");

                    b.Property<string>("Imagen");

                    b.HasKey("QuestionID");

                    b.HasIndex("ExamID")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eLearn.Models.Professor", b =>
                {
                    b.HasBaseType("eLearn.Models.ApplicationUser");

                    b.Property<string>("Grade");

                    b.Property<double>("PeopleRating");

                    b.Property<double>("Rating");

                    b.Property<string>("Speciality");

                    b.ToTable("Professor");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("eLearn.Models.Student", b =>
                {
                    b.HasBaseType("eLearn.Models.ApplicationUser");

                    b.Property<string>("University");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("eLearn.Models.Answer", b =>
                {
                    b.HasOne("eLearn.Models.Evaluation", "Evaluation")
                        .WithMany("Answers")
                        .HasForeignKey("EvaluationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Content", b =>
                {
                    b.HasOne("eLearn.Models.Format", "Format")
                        .WithMany("Contents")
                        .HasForeignKey("FormatID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Lesson", "Lesson")
                        .WithOne("Content")
                        .HasForeignKey("eLearn.Models.Content", "LessonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Course", b =>
                {
                    b.HasOne("eLearn.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorID");
                });

            modelBuilder.Entity("eLearn.Models.Enrollment", b =>
                {
                    b.HasOne("eLearn.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Evaluation", b =>
                {
                    b.HasOne("eLearn.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Student", "Student")
                        .WithMany("Evaluations")
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("eLearn.Models.Exam", b =>
                {
                    b.HasOne("eLearn.Models.Course", "Course")
                        .WithMany("Examns")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Lesson", b =>
                {
                    b.HasOne("eLearn.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.LessonProgress", b =>
                {
                    b.HasOne("eLearn.Models.Lesson", "Lesson")
                        .WithMany("LessonProgress")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Student", "Student")
                        .WithMany("LessonProgress")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Module", b =>
                {
                    b.HasOne("eLearn.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.ModuleProgress", b =>
                {
                    b.HasOne("eLearn.Models.Module", "Module")
                        .WithMany("ModuleProgress")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.Student", "Student")
                        .WithMany("ModuleProgress")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Option", b =>
                {
                    b.HasOne("eLearn.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eLearn.Models.Question", b =>
                {
                    b.HasOne("eLearn.Models.Exam", "Exam")
                        .WithOne("Questions")
                        .HasForeignKey("eLearn.Models.Question", "ExamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eLearn.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eLearn.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eLearn.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eLearn.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
